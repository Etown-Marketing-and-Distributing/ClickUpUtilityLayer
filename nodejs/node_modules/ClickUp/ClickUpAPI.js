/**
 * A class to interact with the ClickUp API.
 */
class ClickUpAPI {
  /**
   * Initializes the ClickUpAPI class.
   * @param {string} apiKey - The API key for authenticating with the ClickUp API.
   * @throws {Error} If the API key is not provided.
   */
  constructor(apiKey) {
    if (!apiKey) throw new Error("API key is required");
    this.apiKey = apiKey;
    this.baseUrl = 'https://api.clickup.com/api/v2';
  }

  /**
   * Creates or updates a task in ClickUp.
   * @param {Object} body - The task details.
   * @param {string} body.name - The name of the task (required).
   * @param {string} [body.description] - The description of the task.
   * @param {Array<Object>} [body.custom_fields] - Custom fields for the task.
   * @param {Array<string>} [body.assignees] - List of assignee emails.
   * @param {Array<Object>} [body.attachments] - List of attachment objects ({ fileName, url }).
   * @param {string} listId - The ID of the ClickUp list (required).
   * @param {string} teamId - The ID of the ClickUp team (required).
   * @param {string} [taskId] - The ID of the task to update. If not provided, a new task is created.
   * @returns {Promise<Object>} The created or updated task object.
   * @throws {Error} If the API request fails.
   */
  async postTask(body, listId, teamId, taskId = null) {
    this.validateTaskInput(body, listId, teamId);

    const url = taskId
      ? `${this.baseUrl}/task/${taskId}`
      : `${this.baseUrl}/list/${listId}/task?team_id=${teamId}`;
    const method = taskId ? 'PUT' : 'POST';

    const translatedBody = {
      ...body,
      custom_fields: await this.convertCustomFields(body.custom_fields, listId),
      assignees: await this.convertAssignees(body.assignees, listId),
    };

    const options = this.createRequestOptions(method, translatedBody);
    const response = await fetch(url, options);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error creating/editing task: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const data = await response.json();

    if (body.attachments && body.attachments.length > 0) {
      const attachmentIds = await this.addAttachments(data.id, body.attachments);
      data.attachments = attachmentIds;
    }

    return data;
  }

  /**
   * Deletes a task in ClickUp.
   * @param {string} taskId - The ID of the task to delete.
   * @returns {Promise<Object>} An object containing the HTTP status code of the deletion request.
   * @throws {Error} If the taskId is not provided or the API request fails.
   */
  async deleteTask(taskId) {
    if (!taskId) throw new Error("No taskId provided");

    const url = `${this.baseUrl}/task/${taskId}`;
    const options = this.createRequestOptions('DELETE');
    const response = await fetch(url, options);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error deleting task: ${response.status} ${response.statusText} - ${errorText}`);
    }

    return { status: response.status };
  }

  /**
   * Maps custom fields to their corresponding IDs in the specified list.
   * @param {Array<Object>} customFields - Array of custom field objects ({ name, value }).
   * @param {string} listId - The ID of the ClickUp list.
   * @returns {Promise<Array<Object>>} An array of mapped custom fields with their IDs and values.
   */
  async convertCustomFields(customFields, listId) {
    if (!customFields || customFields.length === 0) return [];
    const customFieldsInList = await this.getCustomFieldsInList(listId);

    return customFields.map(field => {
      const customField = customFieldsInList.find(f => f.name === field.name);
      return {
        id: customField ? customField.id : null,
        value: field.value || null,
      };
    });
  }

  /**
   * Maps assignee emails to their corresponding user IDs in the specified list.
   * @param {Array<string>} assignees - Array of assignee emails.
   * @param {string} listId - The ID of the ClickUp list.
   * @returns {Promise<Array<string>>} An array of mapped assignee user IDs.
   */
  async convertAssignees(assignees, listId) {
    if (!assignees || assignees.length === 0) return [];
    const usersInList = await this.getUsersInList(listId);

    return assignees
      .map(assignee => {
        const user = usersInList.find(user => user.email === assignee);
        return user ? user.id : null;
      })
      .filter(id => id !== null);
  }

  /**
   * Uploads attachments to a task.
   * @param {string} taskId - The ID of the task to add attachments to.
   * @param {Array<Object>} attachments - Array of attachment objects ({ fileName, url }).
   * @returns {Promise<Array<string>>} An array of attachment IDs.
   */
  async addAttachments(taskId, attachments) {
    const attachmentPromises = attachments.map(async attachment => {
      const attachmentRes = await this.postAttachment(taskId, attachment);
      return attachmentRes.id;
    });

    return Promise.all(attachmentPromises);
  }

  /**
   * Fetches the custom fields available in a specific list.
   * @param {string} listId - The ID of the ClickUp list.
   * @returns {Promise<Array<Object>>} An array of custom fields available in the list.
   * @throws {Error} If the API request fails.
   */
  async getCustomFieldsInList(listId) {
    const url = `${this.baseUrl}/list/${listId}/field`;
    const options = this.createRequestOptions('GET');
    const response = await fetch(url, options);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error fetching custom fields: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const data = await response.json();
    return data.fields;
  }

  /**
   * Fetches the users available in a specific list.
   * @param {string} listId - The ID of the ClickUp list.
   * @returns {Promise<Array<Object>>} An array of users available in the list.
   * @throws {Error} If the API request fails.
   */
  async getUsersInList(listId) {
    const url = `${this.baseUrl}/list/${listId}/member`;
    const options = this.createRequestOptions('GET');
    const response = await fetch(url, options);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error fetching users: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const data = await response.json();
    return data.members;
  }

  /**
   * Uploads a single attachment to a task.
   * @param {string} taskId - The ID of the task to add the attachment to.
   * @param {Object} attachment - The attachment object ({ fileName, url }).
   * @returns {Promise<Object>} The uploaded attachment object.
   * @throws {Error} If the API request fails.
   */
  async postAttachment(taskId, attachment) {
    const url = `${this.baseUrl}/task/${taskId}/attachment`;
    const formData = new FormData();

    const imageres = await fetch(attachment.url);
    const blob = await imageres.blob();
    formData.append('attachment', blob, attachment.fileName);

    const options = {
      method: 'POST',
      headers: {
        Authorization: this.apiKey,
      },
      body: formData,
    };

    const response = await fetch(url, options);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error uploading attachment: ${response.status} ${response.statusText} - ${errorText}`);
    }

    return response.json();
  }

  /**
   * Creates the request options for an API call.
   * @param {string} method - The HTTP method (e.g., GET, POST, PUT, DELETE).
   * @param {Object} [body=null] - The request body.
   * @returns {Object} The request options.
   */
  createRequestOptions(method, body = null) {
    const options = {
      method,
      headers: {
        accept: 'application/json',
        Authorization: this.apiKey,
      },
    };

    if (body) {
      options.headers['content-type'] = 'application/json';
      options.body = JSON.stringify(body);
    }

    return options;
  }

  /**
   * Validates the input for creating or updating a task.
   * @param {Object} body - The task details.
   * @param {string} listId - The ID of the ClickUp list.
   * @param {string} teamId - The ID of the ClickUp team.
   * @throws {Error} If any required parameter is missing.
   */
  validateTaskInput(body, listId, teamId) {
    if (!body) throw new Error("No body provided");
    if (!listId) throw new Error("No listId provided");
    if (!teamId) throw new Error("No teamId provided");
    if (!body.name) throw new Error("No name provided in body");
  }
}

export default ClickUpAPI;