import ClickUpAPI from "./ClickUpAPI.js";

const listId = process.env.CLICKUP_LIST_ID; // Get the listId from environment variables
const teamId = process.env.CLICKUP_TEAM_ID; // Get the teamId from environment variables
const apiKey = process.env.CLICKUP_API_KEY; // Get the API key from environment variables
let createdTaskId =''
const clickUp = new ClickUpAPI(apiKey); // Initialize the ClickUpAPI class
describe("ClickUpAPI - postTask", () => {

  it("Post Task with all features", async () => {
    const estDate = new Date().toLocaleString("en-US", { timeZone: "America/New_York" });
    const currentDateTime = estDate.replace(",", ""); // Format to remove the comma

    const body = {
      name: `Test Task with All Features ${currentDateTime}`,
      description: "This is a test task with all features included.",
      markdown_content: "This is a **test task** with _Markdown_ content.",
      custom_fields: [
        { name: "Notes", value: "Notes go here" },
        { name: "Contact Name", value: "John Doe" }
      ],
      due_date: Date.now() + 24 * 60 * 60 * 1000, // 1 day from now
      start_date: Date.now(), // Current timestamp
      priority: 1, // Urgent
      status: "In Progress",
      tags: ["tag1", "tag2"],
      assignees: ["philip@etownmd.com"],
      attachments: [
        {
          fileName: "testImage1.png",
          url: "https://th.bing.com/th/id/OIP.tFEGOTZ7TqY1zv5vSoZkgQAAAA?w=149&h=150&c=7&r=0&o=5&cb=iwc1&pid=1.7"
        },
        {
          fileName: "testImage2.png",
          url: "https://public.cdn.connecteam.com/czhzmlvqdonvxxfi/mobile/7551844/b0c48ae1a270bc8e79f9240f6963c30f/8da0c214_37c4_4a3f_8039_185ef13ff237_d507b66f-7d4d-4441-8c3d-91fcf35fe348.jpg"
        }
      ]
    };

    const res = await clickUp.postTask(body, listId, teamId); // Use the ClickUpAPI class
    createdTaskId = res.id; // Store the created task ID in the environment variable for later use

    // Persist the updated task ID to the .env file
    console.log(createdTaskId); // Log the response for debugging
    // Assertions
    expect(res).toHaveProperty("id");
    expect(res).toHaveProperty("description");
    expect(res).toHaveProperty("custom_fields");
    expect(res).toHaveProperty("due_date");
    expect(res).toHaveProperty("start_date");
    expect(res).toHaveProperty("priority");
    expect(res.priority.id).toBe(String(body.priority));
    expect(res).toHaveProperty("status");
    expect(res.status.status).toBe("in progress");
    expect(res).toHaveProperty("tags");
    expect(res.tags).toHaveLength(body.tags.length);
    expect(Array.isArray(res.assignees)).toBe(true);
    expect(res.assignees.length).toBe(body.assignees.length);
    expect(res).toHaveProperty("attachments");
    expect(res.attachments).toHaveLength(body.attachments.length);
  });
});
describe("ClickUpAPI - editTask", () => {
  it("Edit Task", async () => {
    console.log("Created Task ID:", createdTaskId); // Log the created task ID for debugging
    if (!createdTaskId) throw new Error("No task ID to edit");

    const body = {
      name: "Updated Test Task",
      description: "This is an updated test task.",
      custom_fields: [
        { name: "Notes", value: "Updated notes" },
        { name: "Contact Name", value: "Jane Doe" }
      ],
      due_date: Date.now() + 48 * 60 * 60 * 1000, // 2 days from now
      start_date: Date.now(), // Current timestamp
      priority: 2, // High
      status: "Complete",
      tags: ["tag3", "tag4"],
      assignees: [""],
      attachments: [
        {
          fileName: "updatedTestImage1.png",
          url: "https://th.bing.com/th/id/OIP.tFEGOTZ7TqY1zv5vSoZkgQAAAA?w=149&h=150&c=7&r=0&o=5&cb=iwc1&pid=1.7"
        }
      ]
    };

    const res = await clickUp.postTask(body, listId, teamId, createdTaskId); // Use the ClickUpAPI class

    if (typeof res !== "object" || res === null) {
      console.error("Response is not a valid JSON object:", res);
      throw new Error("Invalid response format: Expected JSON but received something else");
    }
    console.log("Response:", res); // Log the response for debugging

    //Assertions
    expect(res).toHaveProperty("id");
    expect(res).toHaveProperty("description");
    expect(res).toHaveProperty("custom_fields");
    expect(res).toHaveProperty("due_date");
    expect(res).toHaveProperty("start_date");
    expect(res).toHaveProperty("priority");
    expect(res.priority.id).toBe(String(body.priority));
    expect(res).toHaveProperty("status");
    expect(res.status.status).toBe("complete");
    expect(res).toHaveProperty("tags");
    expect(res.tags).toHaveLength(body.tags.length);
    expect(Array.isArray(res.assignees)).toBe(true);
    expect(res.assignees.length).toBe(body.assignees.length);
    expect(res).toHaveProperty("attachments");
    expect(res.attachments).toHaveLength(body.attachments.length);
  });
});
describe.skip("ClickUpAPI - deleteTask", () => {
  it("Delete Task", async () => {
    if (!createdTaskId) throw new Error("No task ID to delete");

    const res = await clickUp.deleteTask(createdTaskId); // Use the ClickUpAPI class

    // Assertions
    expect(res).toHaveProperty("status");
    expect(res.status).toBe(204); // Assuming 204 No Content for successful deletion
  });
});




